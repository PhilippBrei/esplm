/*
 * generated by Xtext
 */
package org.pklose.espl.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.pklose.espl.services.EsplmGrammarAccess;

public class EsplmParser extends AbstractContentAssistParser {
	
	@Inject
	private EsplmGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.pklose.espl.ui.contentassist.antlr.internal.InternalEsplmParser createParser() {
		org.pklose.espl.ui.contentassist.antlr.internal.InternalEsplmParser result = new org.pklose.espl.ui.contentassist.antlr.internal.InternalEsplmParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getElementAccess().getAlternatives(), "rule__Element__Alternatives");
					put(grammarAccess.getIncludeAccess().getIncludeAlternatives_0_0(), "rule__Include__IncludeAlternatives_0_0");
					put(grammarAccess.getPropertyAccess().getAlternatives(), "rule__Property__Alternatives");
					put(grammarAccess.getMultiplictyAccess().getAlternatives(), "rule__Multiplicty__Alternatives");
					put(grammarAccess.getLiteralAccess().getAlternatives(), "rule__Literal__Alternatives");
					put(grammarAccess.getFlowAccess().getGroup(), "rule__Flow__Group__0");
					put(grammarAccess.getActivityAccess().getGroup(), "rule__Activity__Group__0");
					put(grammarAccess.getActivityAccess().getGroup_3(), "rule__Activity__Group_3__0");
					put(grammarAccess.getActivityAccess().getGroup_3_3(), "rule__Activity__Group_3_3__0");
					put(grammarAccess.getActivityAccess().getGroup_4(), "rule__Activity__Group_4__0");
					put(grammarAccess.getBusinessRuleAccess().getGroup(), "rule__BusinessRule__Group__0");
					put(grammarAccess.getImportAccess().getGroup(), "rule__Import__Group__0");
					put(grammarAccess.getFqnWithWildCardAccess().getGroup(), "rule__FqnWithWildCard__Group__0");
					put(grammarAccess.getDiagramAccess().getGroup(), "rule__Diagram__Group__0");
					put(grammarAccess.getIncludeAccess().getGroup(), "rule__Include__Group__0");
					put(grammarAccess.getIncludeAccess().getGroup_2(), "rule__Include__Group_2__0");
					put(grammarAccess.getIncludeAccess().getGroup_2_3(), "rule__Include__Group_2_3__0");
					put(grammarAccess.getEnumDeclarationAccess().getGroup(), "rule__EnumDeclaration__Group__0");
					put(grammarAccess.getEnumDeclarationAccess().getGroup_4(), "rule__EnumDeclaration__Group_4__0");
					put(grammarAccess.getFQNAccess().getGroup(), "rule__FQN__Group__0");
					put(grammarAccess.getFQNAccess().getGroup_1(), "rule__FQN__Group_1__0");
					put(grammarAccess.getEntityAccess().getGroup(), "rule__Entity__Group__0");
					put(grammarAccess.getDomainAccess().getGroup(), "rule__Domain__Group__0");
					put(grammarAccess.getAssociationAccess().getGroup(), "rule__Association__Group__0");
					put(grammarAccess.getMultiplictyAccess().getGroup_0(), "rule__Multiplicty__Group_0__0");
					put(grammarAccess.getMultiplictyAccess().getGroup_1(), "rule__Multiplicty__Group_1__0");
					put(grammarAccess.getMultiplictyAccess().getGroup_2(), "rule__Multiplicty__Group_2__0");
					put(grammarAccess.getMultiplictyAccess().getGroup_3(), "rule__Multiplicty__Group_3__0");
					put(grammarAccess.getFieldAccess().getGroup(), "rule__Field__Group__0");
					put(grammarAccess.getLiteralAccess().getGroup_0(), "rule__Literal__Group_0__0");
					put(grammarAccess.getLiteralAccess().getGroup_1(), "rule__Literal__Group_1__0");
					put(grammarAccess.getLiteralAccess().getGroup_2(), "rule__Literal__Group_2__0");
					put(grammarAccess.getLiteralAccess().getGroup_3(), "rule__Literal__Group_3__0");
					put(grammarAccess.getLiteralAccess().getGroup_4(), "rule__Literal__Group_4__0");
					put(grammarAccess.getEnumAccess().getGroup(), "rule__Enum__Group__0");
					put(grammarAccess.getModelAccess().getElementsAssignment(), "rule__Model__ElementsAssignment");
					put(grammarAccess.getFlowAccess().getImportsAssignment_0(), "rule__Flow__ImportsAssignment_0");
					put(grammarAccess.getFlowAccess().getNameAssignment_2(), "rule__Flow__NameAssignment_2");
					put(grammarAccess.getFlowAccess().getActivitiesAssignment_4(), "rule__Flow__ActivitiesAssignment_4");
					put(grammarAccess.getActivityAccess().getNameAssignment_1(), "rule__Activity__NameAssignment_1");
					put(grammarAccess.getActivityAccess().getSucessorsAssignment_3_2(), "rule__Activity__SucessorsAssignment_3_2");
					put(grammarAccess.getActivityAccess().getSucessorsAssignment_3_3_1(), "rule__Activity__SucessorsAssignment_3_3_1");
					put(grammarAccess.getActivityAccess().getBusinessRuleAssignment_4_1(), "rule__Activity__BusinessRuleAssignment_4_1");
					put(grammarAccess.getActivityAccess().getDescriptionAssignment_6(), "rule__Activity__DescriptionAssignment_6");
					put(grammarAccess.getBusinessRuleAccess().getNameAssignment_1(), "rule__BusinessRule__NameAssignment_1");
					put(grammarAccess.getImportAccess().getImportedNamespaceAssignment_1(), "rule__Import__ImportedNamespaceAssignment_1");
					put(grammarAccess.getDiagramAccess().getImportsAssignment_0(), "rule__Diagram__ImportsAssignment_0");
					put(grammarAccess.getDiagramAccess().getNameAssignment_2(), "rule__Diagram__NameAssignment_2");
					put(grammarAccess.getDiagramAccess().getIncludesAssignment_4(), "rule__Diagram__IncludesAssignment_4");
					put(grammarAccess.getIncludeAccess().getIncludeAssignment_0(), "rule__Include__IncludeAssignment_0");
					put(grammarAccess.getIncludeAccess().getEntityAssignment_1(), "rule__Include__EntityAssignment_1");
					put(grammarAccess.getIncludeAccess().getFieldsAssignment_2_2(), "rule__Include__FieldsAssignment_2_2");
					put(grammarAccess.getIncludeAccess().getFieldsAssignment_2_3_1(), "rule__Include__FieldsAssignment_2_3_1");
					put(grammarAccess.getEnumDeclarationAccess().getNameAssignment_1(), "rule__EnumDeclaration__NameAssignment_1");
					put(grammarAccess.getEnumDeclarationAccess().getValuesAssignment_3(), "rule__EnumDeclaration__ValuesAssignment_3");
					put(grammarAccess.getEntityAccess().getNameAssignment_1(), "rule__Entity__NameAssignment_1");
					put(grammarAccess.getEntityAccess().getPropertiesAssignment_3(), "rule__Entity__PropertiesAssignment_3");
					put(grammarAccess.getDomainAccess().getImportsAssignment_0(), "rule__Domain__ImportsAssignment_0");
					put(grammarAccess.getDomainAccess().getNameAssignment_2(), "rule__Domain__NameAssignment_2");
					put(grammarAccess.getDomainAccess().getDescriptionAssignment_4(), "rule__Domain__DescriptionAssignment_4");
					put(grammarAccess.getDomainAccess().getEntitiesAssignment_6(), "rule__Domain__EntitiesAssignment_6");
					put(grammarAccess.getAssociationAccess().getNameAssignment_1(), "rule__Association__NameAssignment_1");
					put(grammarAccess.getAssociationAccess().getTypeAssignment_3(), "rule__Association__TypeAssignment_3");
					put(grammarAccess.getAssociationAccess().getMultiplicityAssignment_4(), "rule__Association__MultiplicityAssignment_4");
					put(grammarAccess.getMultiplictyAccess().getNameAssignment_0_1(), "rule__Multiplicty__NameAssignment_0_1");
					put(grammarAccess.getMultiplictyAccess().getNameAssignment_1_1(), "rule__Multiplicty__NameAssignment_1_1");
					put(grammarAccess.getMultiplictyAccess().getNameAssignment_2_1(), "rule__Multiplicty__NameAssignment_2_1");
					put(grammarAccess.getMultiplictyAccess().getNameAssignment_3_1(), "rule__Multiplicty__NameAssignment_3_1");
					put(grammarAccess.getFieldAccess().getNameAssignment_1(), "rule__Field__NameAssignment_1");
					put(grammarAccess.getFieldAccess().getLiteralAssignment_3(), "rule__Field__LiteralAssignment_3");
					put(grammarAccess.getLiteralAccess().getNameAssignment_0_1(), "rule__Literal__NameAssignment_0_1");
					put(grammarAccess.getLiteralAccess().getNameAssignment_1_1(), "rule__Literal__NameAssignment_1_1");
					put(grammarAccess.getLiteralAccess().getNameAssignment_2_1(), "rule__Literal__NameAssignment_2_1");
					put(grammarAccess.getLiteralAccess().getNameAssignment_3_1(), "rule__Literal__NameAssignment_3_1");
					put(grammarAccess.getLiteralAccess().getNameAssignment_4_1(), "rule__Literal__NameAssignment_4_1");
					put(grammarAccess.getEnumAccess().getTypeAssignment_1(), "rule__Enum__TypeAssignment_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.pklose.espl.ui.contentassist.antlr.internal.InternalEsplmParser typedParser = (org.pklose.espl.ui.contentassist.antlr.internal.InternalEsplmParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public EsplmGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(EsplmGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
