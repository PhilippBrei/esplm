/*
 * generated by Xtext
 */
package org.pklose.espl.scoping

import org.eclipse.xtext.scoping.IScope
import org.pklose.espl.esplm.Include
import org.eclipse.xtext.scoping.Scopes
import org.eclipse.emf.ecore.EReference
import java.util.List
import org.eclipse.emf.ecore.EObject
import java.util.ArrayList
import org.pklose.espl.esplm.Field
import org.pklose.espl.esplm.Association
import org.pklose.espl.esplm.BusinessRule
import org.eclipse.xtext.EcoreUtil2
import org.pklose.espl.esplm.Entity
import org.pklose.espl.esplm.BREType
import org.pklose.espl.esplm.SystemEntity

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 *
 */
class EsplmScopeProvider extends org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider {
	
	def IScope scope_Include_fields (Include include, EReference ref) {
		val List<EObject> scopeObjects = new ArrayList();
		val fields = include.entity.properties.filter(typeof (Field));		
		val references = include.entity.properties.filter(typeof (Association));
		scopeObjects.addAll(fields);
		scopeObjects.addAll(references)		
		return Scopes::scopeFor(include.entity.properties);
	}
	
	
	//TODO test required!
	def IScope scope_BusinessRule_systemInputs (BusinessRule bre, EReference ref) {
		
		
		val rootElement = EcoreUtil2.getRootContainer(bre);
		
		var List<? extends EObject> scopeElements = new ArrayList ();
		if (bre.typ.equals(BREType.BIZ_TO_BIZ)) {
			scopeElements =  EcoreUtil2.getAllContentsOfType(rootElement, Entity);		
		} else if (bre.typ.equals(BREType.SRC_TO_BIZ)) {
			scopeElements = EcoreUtil2.getAllContentsOfType(rootElement, SystemEntity);
		}		
		
		return Scopes::scopeFor(scopeElements);
				
	}

}
