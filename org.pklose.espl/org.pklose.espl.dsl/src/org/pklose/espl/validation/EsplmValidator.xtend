/*
 * generated by Xtext
 */
package org.pklose.espl.validation

import org.eclipse.xtext.validation.Check
import org.pklose.espl.esplm.BusinessRule
import org.pklose.espl.esplm.BREType
import org.pklose.espl.esplm.BreEntityInput
import org.pklose.espl.esplm.EsplmPackage
import org.pklose.espl.esplm.BreSystemEntityInput
import org.eclipse.xtend.lib.macro.services.Problem.Severity

//import org.eclipse.xtext.validation.Check
/**
 * This class contains custom validation rules. 
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class EsplmValidator extends AbstractEsplmValidator {

	final val SRC_TO_BIZ_ERROR = 'F체r SrcToBiz sind nur Src Entit채ten als Input erlaubt'
	final val BIZ_TO_BIZ_ERROR = 'F체r BizToBiz sind nur Entit채ten als Input erlaubt'

//  public static val INVALID_NAME = 'invalidName'
//
//	@Check
//	def checkGreetingStartsWithCapital(Greeting greeting) {
//		if (!Character.isUpperCase(greeting.name.charAt(0))) {
//			warning('Name should start with a capital', 
//					MyDslPackage.Literals.GREETING__NAME,
//					INVALID_NAME)
//		}
//	}
	@Check
	def checkBREInputTypesMatch(BusinessRule businessRule) {
		if (BREType.BIZ_TO_BIZ.equals(businessRule.typ)) {
			for (bre : businessRule.systemInputs.filter(typeof(BreEntityInput))) {
				addIssue(BIZ_TO_BIZ_ERROR, bre, EsplmPackage.Literals.BRE_ENTITY_INPUT__INPUT_ELEMENT,
					Severity::ERROR.name);
			}
		}

		if (BREType.SRC_TO_BIZ.equals(businessRule.typ)) {
			for (bre : businessRule.systemInputs.filter(typeof(BreSystemEntityInput))) {
				addIssue(SRC_TO_BIZ_ERROR, bre, EsplmPackage.Literals.BRE_ENTITY_INPUT__INPUT_ELEMENT,
					Severity::ERROR.name);
			}
		}
	}
}

