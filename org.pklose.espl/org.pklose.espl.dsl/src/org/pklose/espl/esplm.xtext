grammar org.pklose.espl.Esplm with org.eclipse.xtext.common.Terminals

generate esplm "http://www.org.pklose/esplm"

Model:
	elements += Element
;

Element:
	EnumDeclaration | Diagram | Domain | Flow | BusinessRule | System
;

Flow:
	 imports += Import*
	'Flow' name = ID '{'
	  (activities+=Activity)*
	'}'
;

Activity:
	'Activity' name= ID '{'		
		('Successors'   '['sucessors += [Activity] (',' sucessors += [Activity])*']')?
		('Calls' businessRule = [BusinessRule|FQN])?
		'Description' description = STRING		
	'}'
;

BusinessRule:
	imports += Import*
	'BusinessRule' name=ID 'type' typ = BREType '{'
		 'Input' '[' 
		   (systemInputs += (BreSystemEntityInput | BreEntityInput))* 
		 ']'
		 'Output' '['
		 	output = ([Entity|FQN] | [SystemEntity|FQN])
		 ']'
	'}'
;

BreSystemEntityInput:
	inputElement = [SystemEntity|FQN]
	configuration += SystemEntityConfiguration
;

BreEntityInput:
	inputElement = [Entity|FQN]
	configuration += EntityConfiguration
;

SystemEntityConfiguration:
	{SystemEntityConfiguration}  '{''primär' '=' primary = Boolean ',' 
								 'obligatorisch' '=' obligatorisch = Boolean ',' 
								 'mehrfach' '=' multiple = Boolean 
								 (',''join Pfad' '=' joinCriteria = STRING)?
;

EntityConfiguration:
	{EntityConfiguration}  '{''primär' '=' primary = Boolean 
							',''obligatorisch' '=' obligatorisch = Boolean 
							',''mehrfach' '=' multiple = Boolean 
							(',''Pfad' '=' path = [Association|FQN])?						
							'}'
;


enum Boolean: 
	true = 'J' | false = 'F'
;



enum BREType:
	BizToBiz = 'BizToBiz' | SrcToBiz = 'SrcToBiz' | BizToOut = 'BizToOut'
;




System:
	'SourceSystem' name = ID '{'
		srcEntities+=SystemEntity
	'}'
;

SystemEntity:
	'Name' name=ID 'Format' format = STRING
;





Import: 'Import' importedNamespace=FqnWithWildCard;

FqnWithWildCard: FQN('.*')?;

Diagram:	
	 imports += Import*
	'Diagram' name = ID '{'	
		includes += Include*		
	 '}'
;

Include:
	include = ('Include'|'Exclude') entity = [Entity|FQN] ('with' '{'
			fields += [Property] (',' fields += [Property])*
		'}')
;

EnumDeclaration:
	'Enumeration' name = ID '{'
		values += ID ("," ID)*		
	'}'
;

FQN: ID ("." ID)*;

Entity:
	'Entity' name = ID '{'
		(properties += Property)*
	'}'
;

Domain:
	imports += Import*
	'Domain' name = ID 'Description: ' description = STRING '{'
	    entities += Entity+
	 '}'
;

Property:
	Field | Association
;


Association:
	 'Relation'  name = ID ':' type = [Entity|FQN] multiplicity = Multiplicty
;

enum Multiplicty:
	OneToMany = '1..N' | ZeroToMany = '0..N' | OneToOne= '1' 
;



Field:
	'Field' name = ID ':' literal = Literal;

Literal:
	{Literal} name= 'Decimal' | {Literal} name= 'Money' | {Literal} name= 'Text' |{Literal} name= 'Boolean' |{Literal} name= 'Int' | Enum
;

Enum:
	'Enum' type = [EnumDeclaration]
;
