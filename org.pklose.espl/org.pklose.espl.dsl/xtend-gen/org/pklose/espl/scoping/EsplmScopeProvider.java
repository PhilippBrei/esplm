/**
 * generated by Xtext
 */
package org.pklose.espl.scoping;

import com.google.common.collect.Iterables;
import java.util.ArrayList;
import java.util.List;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider;
import org.pklose.espl.esplm.Association;
import org.pklose.espl.esplm.BREType;
import org.pklose.espl.esplm.BusinessRule;
import org.pklose.espl.esplm.Entity;
import org.pklose.espl.esplm.Field;
import org.pklose.espl.esplm.Include;
import org.pklose.espl.esplm.Property;
import org.pklose.espl.esplm.SystemEntity;

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
@SuppressWarnings("all")
public class EsplmScopeProvider extends AbstractDeclarativeScopeProvider {
  public IScope scope_Include_fields(final Include include, final EReference ref) {
    final List<EObject> scopeObjects = new ArrayList<EObject>();
    Entity _entity = include.getEntity();
    EList<Property> _properties = _entity.getProperties();
    final Iterable<Field> fields = Iterables.<Field>filter(_properties, Field.class);
    Entity _entity_1 = include.getEntity();
    EList<Property> _properties_1 = _entity_1.getProperties();
    final Iterable<Association> references = Iterables.<Association>filter(_properties_1, Association.class);
    Iterables.<EObject>addAll(scopeObjects, fields);
    Iterables.<EObject>addAll(scopeObjects, references);
    Entity _entity_2 = include.getEntity();
    EList<Property> _properties_2 = _entity_2.getProperties();
    return Scopes.scopeFor(_properties_2);
  }
  
  public IScope scope_BusinessRule_systemInputs(final BusinessRule bre, final EReference ref) {
    final EObject rootElement = EcoreUtil2.getRootContainer(bre);
    List<? extends EObject> scopeElements = new ArrayList<EObject>();
    BREType _typ = bre.getTyp();
    boolean _equals = _typ.equals(BREType.BIZ_TO_BIZ);
    if (_equals) {
      List<Entity> _allContentsOfType = EcoreUtil2.<Entity>getAllContentsOfType(rootElement, Entity.class);
      scopeElements = _allContentsOfType;
    } else {
      BREType _typ_1 = bre.getTyp();
      boolean _equals_1 = _typ_1.equals(BREType.SRC_TO_BIZ);
      if (_equals_1) {
        List<SystemEntity> _allContentsOfType_1 = EcoreUtil2.<SystemEntity>getAllContentsOfType(rootElement, SystemEntity.class);
        scopeElements = _allContentsOfType_1;
      }
    }
    return Scopes.scopeFor(scopeElements);
  }
}
