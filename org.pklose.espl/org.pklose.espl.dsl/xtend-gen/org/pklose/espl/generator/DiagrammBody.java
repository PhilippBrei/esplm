package org.pklose.espl.generator;

import com.google.common.collect.Iterables;
import java.util.ArrayList;
import java.util.List;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.pklose.espl.generator.Link;
import org.pklose.espl.generator.Node;

@SuppressWarnings("all")
public class DiagrammBody {
  private final String title;
  
  private final List<Node> nodes = new ArrayList<Node>();
  
  private final List<Link> links = new ArrayList<Link>();
  
  public DiagrammBody(final String title, final Iterable<Node> nodes, final Iterable<Link> links) {
    this.title = title;
    Iterables.<Node>addAll(this.nodes, nodes);
    Iterables.<Link>addAll(this.links, links);
  }
  
  public String getAsHTML() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<!DOCTYPE html>");
    _builder.newLine();
    _builder.append("<html>");
    _builder.newLine();
    _builder.append("<head>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<title>Entity Relationship</title>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<meta name=\"description\" content=\"Interactive entity-relationship diagram or data model diagram implemented by GoJS in JavaScript for HTML.\" />");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<!-- Copyright 1998-2016 by Northwoods Software Corporation. -->");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<meta charset=\"UTF-8\">");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<script src=\"http://gojs.net/latest/release/go.js\"></script>   ");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<script id=\"code\">");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("function init() {           ");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("var $ = go.GraphObject.make;");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("myDiagram =");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("$(go.Diagram, \"");
    _builder.append(this.title, "                    ");
    _builder.append("\",");
    _builder.newLineIfNotEmpty();
    _builder.append("                            ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("                                ");
    _builder.append("initialContentAlignment: go.Spot.Center,");
    _builder.newLine();
    _builder.append("                                ");
    _builder.append("\"undoManager.isEnabled\": true,");
    _builder.newLine();
    _builder.append("                                ");
    _builder.append("layout: $(go.ForceDirectedLayout)");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("// show visibility or access as a single character at the beginning of each property or method");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("function convertVisibility(v) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("switch (v) {");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("case \"public\": return \"+\";");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("case \"private\": return \"-\";");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("case \"protected\": return \"#\";");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("case \"package\": return \"~\";");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("default: return v;");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("// the item template for properties");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("var propertyTemplate =");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("$(go.Panel, \"Horizontal\",");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("// property visibility/access");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("$(go.TextBlock,");
    _builder.newLine();
    _builder.append("                                    ");
    _builder.append("{ isMultiline: false, editable: false, width: 12 },");
    _builder.newLine();
    _builder.append("                                    ");
    _builder.append("new go.Binding(\"text\", \"visibility\", convertVisibility)),");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("// property name, underlined if scope==\"class\" to indicate static property");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("$(go.TextBlock,");
    _builder.newLine();
    _builder.append("                                    ");
    _builder.append("{ isMultiline: false, editable: true },");
    _builder.newLine();
    _builder.append("                                    ");
    _builder.append("new go.Binding(\"text\", \"name\").makeTwoWay(),");
    _builder.newLine();
    _builder.append("                                    ");
    _builder.append("new go.Binding(\"isUnderline\", \"scope\", function(s) { return s[0] === \'c\' })),");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("// property type, if known");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("$(go.TextBlock, \"\",");
    _builder.newLine();
    _builder.append("                                    ");
    _builder.append("new go.Binding(\"text\", \"type\", function(t) { return (t ? \": \" : \"\"); })),");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("$(go.TextBlock,");
    _builder.newLine();
    _builder.append("                                    ");
    _builder.append("{ isMultiline: false, editable: true },");
    _builder.newLine();
    _builder.append("                                    ");
    _builder.append("new go.Binding(\"text\", \"type\").makeTwoWay()),");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("// property default value, if any");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("$(go.TextBlock,");
    _builder.newLine();
    _builder.append("                                    ");
    _builder.append("{ isMultiline: false, editable: false },");
    _builder.newLine();
    _builder.append("                                    ");
    _builder.append("new go.Binding(\"text\", \"default\", function(s) { return s ? \" = \" + s : \"\"; }))");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append(");");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("// the item template for methods");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("var methodTemplate =");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("$(go.Panel, \"Horizontal\",");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("// method visibility/access");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("$(go.TextBlock,");
    _builder.newLine();
    _builder.append("                                    ");
    _builder.append("{ isMultiline: false, editable: false, width: 12 },");
    _builder.newLine();
    _builder.append("                                    ");
    _builder.append("new go.Binding(\"text\", \"visibility\", convertVisibility)),");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("// method name, underlined if scope==\"class\" to indicate static method");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("$(go.TextBlock,");
    _builder.newLine();
    _builder.append("                                    ");
    _builder.append("{ isMultiline: false, editable: true },");
    _builder.newLine();
    _builder.append("                                    ");
    _builder.append("new go.Binding(\"text\", \"name\").makeTwoWay(),");
    _builder.newLine();
    _builder.append("                                    ");
    _builder.append("new go.Binding(\"isUnderline\", \"scope\", function(s) { return s[0] === \'c\' })),");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("// method parameters");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("$(go.TextBlock, \"()\",");
    _builder.newLine();
    _builder.append("                                    ");
    _builder.append("// this does not permit adding/editing/removing of parameters via inplace edits");
    _builder.newLine();
    _builder.append("                                    ");
    _builder.append("new go.Binding(\"text\", \"parameters\", function(parr) {");
    _builder.newLine();
    _builder.append("                                        ");
    _builder.append("var s = \"(\";");
    _builder.newLine();
    _builder.append("                                        ");
    _builder.append("for (var i = 0; i < parr.length; i++) {");
    _builder.newLine();
    _builder.append("                                            ");
    _builder.append("var param = parr[i];");
    _builder.newLine();
    _builder.append("                                            ");
    _builder.append("if (i > 0) s += \", \";");
    _builder.newLine();
    _builder.append("                                            ");
    _builder.append("s += param.name + \": \" + param.type;");
    _builder.newLine();
    _builder.append("                                        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("                                        ");
    _builder.append("return s + \")\";");
    _builder.newLine();
    _builder.append("                                    ");
    _builder.append("})),");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("// method return type, if any");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("$(go.TextBlock, \"\",");
    _builder.newLine();
    _builder.append("                                    ");
    _builder.append("new go.Binding(\"text\", \"type\", function(t) { return (t ? \": \" : \"\"); })),");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("$(go.TextBlock,");
    _builder.newLine();
    _builder.append("                                    ");
    _builder.append("{ isMultiline: false, editable: true },");
    _builder.newLine();
    _builder.append("                                    ");
    _builder.append("new go.Binding(\"text\", \"type\").makeTwoWay())");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append(");");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("// this simple template does not have any buttons to permit adding or");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("// removing properties or methods, but it could!");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("myDiagram.nodeTemplate =");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("$(go.Node, \"Auto\",");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("                                ");
    _builder.append("locationSpot: go.Spot.Center,");
    _builder.newLine();
    _builder.append("                                ");
    _builder.append("fromSpot: go.Spot.AllSides,");
    _builder.newLine();
    _builder.append("                                ");
    _builder.append("toSpot: go.Spot.AllSides");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("},");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("$(go.Shape, { fill: \"lightyellow\" }),");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("$(go.Panel, \"Table\",");
    _builder.newLine();
    _builder.append("                                    ");
    _builder.append("{ defaultRowSeparatorStroke: \"black\" },");
    _builder.newLine();
    _builder.append("                                    ");
    _builder.append("// header");
    _builder.newLine();
    _builder.append("                                    ");
    _builder.append("$(go.TextBlock,");
    _builder.newLine();
    _builder.append("                                            ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("                                                ");
    _builder.append("row: 0, margin: 3, alignment: go.Spot.Center,");
    _builder.newLine();
    _builder.append("                                                ");
    _builder.append("font: \"bold 12pt sans-serif\",");
    _builder.newLine();
    _builder.append("                                                ");
    _builder.append("isMultiline: false, editable: true");
    _builder.newLine();
    _builder.append("                                            ");
    _builder.append("},");
    _builder.newLine();
    _builder.append("                                            ");
    _builder.append("new go.Binding(\"text\", \"name\").makeTwoWay()),");
    _builder.newLine();
    _builder.append("                                    ");
    _builder.append("// properties");
    _builder.newLine();
    _builder.append("                                    ");
    _builder.append("$(go.Panel, \"Vertical\",");
    _builder.newLine();
    _builder.append("                                            ");
    _builder.append("new go.Binding(\"itemArray\", \"properties\"),");
    _builder.newLine();
    _builder.append("                                            ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("                                                ");
    _builder.append("row: 1, margin: 3, alignment: go.Spot.Left,");
    _builder.newLine();
    _builder.append("                                                ");
    _builder.append("defaultAlignment: go.Spot.Left,");
    _builder.newLine();
    _builder.append("                                                ");
    _builder.append("itemTemplate: propertyTemplate");
    _builder.newLine();
    _builder.append("                                            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("                                    ");
    _builder.append("),");
    _builder.newLine();
    _builder.append("                                    ");
    _builder.append("// methods");
    _builder.newLine();
    _builder.append("                                    ");
    _builder.append("$(go.Panel, \"Vertical\",");
    _builder.newLine();
    _builder.append("                                            ");
    _builder.append("new go.Binding(\"itemArray\", \"methods\"),");
    _builder.newLine();
    _builder.append("                                            ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("                                                ");
    _builder.append("row: 2, margin: 3, alignment: go.Spot.Left,");
    _builder.newLine();
    _builder.append("                                                ");
    _builder.append("defaultAlignment: go.Spot.Left,");
    _builder.newLine();
    _builder.append("                                                ");
    _builder.append("itemTemplate: methodTemplate");
    _builder.newLine();
    _builder.append("                                            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("                                    ");
    _builder.append("))");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append(");");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("function convertIsTreeLink(r) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("return r === \"generalization\";");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("function convertFromArrow(r) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("switch (r) {");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("case \"generalization\": return \"\";");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("default: return \"\";");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("function convertToArrow(r) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("switch (r) {");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("case \"generalization\": return \"Triangle\";");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("case \"association\": return \"Feather\";");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("default: return \"\";");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("myDiagram.linkTemplate =");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("$(go.Link,");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("{ routing: go.Link.Orthogonal },");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("new go.Binding(\"isLayoutPositioned\", \"relationship\", convertIsTreeLink),");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("$(go.Shape),");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("$(go.Shape, { scale: 1.3, fill: \"white\" },");
    _builder.newLine();
    _builder.append("                                    ");
    _builder.append("new go.Binding(\"fromArrow\", \"relationship\", convertFromArrow)),");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("$(go.Shape, { scale: 1.3, fill: \"white\" },");
    _builder.newLine();
    _builder.append("                                    ");
    _builder.append("new go.Binding(\"toArrow\", \"relationship\", convertToArrow))");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append(");");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("// setup a few example class nodes and relationships");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("var nodedata = [");
    _builder.newLine();
    {
      boolean _hasElements = false;
      for(final Node node : this.nodes) {
        if (!_hasElements) {
          _hasElements = true;
        } else {
          _builder.appendImmediate(",", "                ");
        }
        _builder.append("                ");
        String _asJson = node.getAsJson();
        _builder.append(_asJson, "                ");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("            ");
    _builder.append("];");
    _builder.newLine();
    _builder.append("            ");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("var linkdata = [");
    _builder.newLine();
    {
      boolean _hasElements_1 = false;
      for(final Link link : this.links) {
        if (!_hasElements_1) {
          _hasElements_1 = true;
        } else {
          _builder.appendImmediate(",", "                ");
        }
        _builder.append("                ");
        String _jSON = link.toJSON();
        _builder.append(_jSON, "                ");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("            ");
    _builder.append("];");
    _builder.newLine();
    _builder.append("            ");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("myDiagram.model = $(go.GraphLinksModel,");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("copiesArrays: true,");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("copiesArrayObjects: true,");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("nodeDataArray: nodedata,");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("linkDataArray: linkdata");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("</script>");
    _builder.newLine();
    _builder.append("</head>");
    _builder.newLine();
    _builder.append("<body onload=\"init()\">");
    _builder.newLine();
    _builder.append("<div id=\"sample\">");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<div id=\"");
    _builder.append(this.title, "    ");
    _builder.append("\" style=\"background-color: white; border: solid 1px black; width: 100%; height: 700px\"></div>");
    _builder.newLineIfNotEmpty();
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("</body>");
    _builder.newLine();
    _builder.append("</html>");
    _builder.newLine();
    return _builder.toString();
  }
}
