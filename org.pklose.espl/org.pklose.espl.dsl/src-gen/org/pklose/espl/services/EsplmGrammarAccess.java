/*
 * generated by Xtext
 */
package org.pklose.espl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class EsplmGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Assignment cElementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cElementsElementParserRuleCall_0 = (RuleCall)cElementsAssignment.eContents().get(0);
		
		//Model:
		//	elements+=Element;
		@Override public ParserRule getRule() { return rule; }

		//elements+=Element
		public Assignment getElementsAssignment() { return cElementsAssignment; }

		//Element
		public RuleCall getElementsElementParserRuleCall_0() { return cElementsElementParserRuleCall_0; }
	}

	public class ElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Element");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEnumDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDiagramParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDomainParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cFlowParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cBusinessRuleParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cSystemParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//Element:
		//	EnumDeclaration | Diagram | Domain | Flow | BusinessRule | System;
		@Override public ParserRule getRule() { return rule; }

		//EnumDeclaration | Diagram | Domain | Flow | BusinessRule | System
		public Alternatives getAlternatives() { return cAlternatives; }

		//EnumDeclaration
		public RuleCall getEnumDeclarationParserRuleCall_0() { return cEnumDeclarationParserRuleCall_0; }

		//Diagram
		public RuleCall getDiagramParserRuleCall_1() { return cDiagramParserRuleCall_1; }

		//Domain
		public RuleCall getDomainParserRuleCall_2() { return cDomainParserRuleCall_2; }

		//Flow
		public RuleCall getFlowParserRuleCall_3() { return cFlowParserRuleCall_3; }

		//BusinessRule
		public RuleCall getBusinessRuleParserRuleCall_4() { return cBusinessRuleParserRuleCall_4; }

		//System
		public RuleCall getSystemParserRuleCall_5() { return cSystemParserRuleCall_5; }
	}

	public class FlowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Flow");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cImportsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cImportsImportParserRuleCall_0_0 = (RuleCall)cImportsAssignment_0.eContents().get(0);
		private final Keyword cFlowKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cActivitiesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cActivitiesActivityParserRuleCall_4_0 = (RuleCall)cActivitiesAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Flow:
		//	imports+=Import* "Flow" name=ID "{" activities+=Activity* "}";
		@Override public ParserRule getRule() { return rule; }

		//imports+=Import* "Flow" name=ID "{" activities+=Activity* "}"
		public Group getGroup() { return cGroup; }

		//imports+=Import*
		public Assignment getImportsAssignment_0() { return cImportsAssignment_0; }

		//Import
		public RuleCall getImportsImportParserRuleCall_0_0() { return cImportsImportParserRuleCall_0_0; }

		//"Flow"
		public Keyword getFlowKeyword_1() { return cFlowKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//activities+=Activity*
		public Assignment getActivitiesAssignment_4() { return cActivitiesAssignment_4; }

		//Activity
		public RuleCall getActivitiesActivityParserRuleCall_4_0() { return cActivitiesActivityParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class ActivityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Activity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cActivityKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cSuccessorsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cSucessorsAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final CrossReference cSucessorsActivityCrossReference_3_2_0 = (CrossReference)cSucessorsAssignment_3_2.eContents().get(0);
		private final RuleCall cSucessorsActivityIDTerminalRuleCall_3_2_0_1 = (RuleCall)cSucessorsActivityCrossReference_3_2_0.eContents().get(1);
		private final Group cGroup_3_3 = (Group)cGroup_3.eContents().get(3);
		private final Keyword cCommaKeyword_3_3_0 = (Keyword)cGroup_3_3.eContents().get(0);
		private final Assignment cSucessorsAssignment_3_3_1 = (Assignment)cGroup_3_3.eContents().get(1);
		private final CrossReference cSucessorsActivityCrossReference_3_3_1_0 = (CrossReference)cSucessorsAssignment_3_3_1.eContents().get(0);
		private final RuleCall cSucessorsActivityIDTerminalRuleCall_3_3_1_0_1 = (RuleCall)cSucessorsActivityCrossReference_3_3_1_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCallsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cBusinessRuleAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cBusinessRuleBusinessRuleCrossReference_4_1_0 = (CrossReference)cBusinessRuleAssignment_4_1.eContents().get(0);
		private final RuleCall cBusinessRuleBusinessRuleFQNParserRuleCall_4_1_0_1 = (RuleCall)cBusinessRuleBusinessRuleCrossReference_4_1_0.eContents().get(1);
		private final Keyword cDescriptionKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cDescriptionAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final Keyword cDescriptionQuotationMarkKeyword_6_0 = (Keyword)cDescriptionAssignment_6.eContents().get(0);
		private final Keyword cQuotationMarkKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Activity:
		//	"Activity" name=ID "{" ("Successors" "[" sucessors+=[Activity] ("," sucessors+=[Activity])* "]")? ("Calls"
		//	businessRule=[BusinessRule|FQN])? "Description" description="\"" -> "\"" "}";
		@Override public ParserRule getRule() { return rule; }

		//"Activity" name=ID "{" ("Successors" "[" sucessors+=[Activity] ("," sucessors+=[Activity])* "]")? ("Calls"
		//businessRule=[BusinessRule|FQN])? "Description" description="\"" -> "\"" "}"
		public Group getGroup() { return cGroup; }

		//"Activity"
		public Keyword getActivityKeyword_0() { return cActivityKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//("Successors" "[" sucessors+=[Activity] ("," sucessors+=[Activity])* "]")?
		public Group getGroup_3() { return cGroup_3; }

		//"Successors"
		public Keyword getSuccessorsKeyword_3_0() { return cSuccessorsKeyword_3_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_3_1() { return cLeftSquareBracketKeyword_3_1; }

		//sucessors+=[Activity]
		public Assignment getSucessorsAssignment_3_2() { return cSucessorsAssignment_3_2; }

		//[Activity]
		public CrossReference getSucessorsActivityCrossReference_3_2_0() { return cSucessorsActivityCrossReference_3_2_0; }

		//ID
		public RuleCall getSucessorsActivityIDTerminalRuleCall_3_2_0_1() { return cSucessorsActivityIDTerminalRuleCall_3_2_0_1; }

		//("," sucessors+=[Activity])*
		public Group getGroup_3_3() { return cGroup_3_3; }

		//","
		public Keyword getCommaKeyword_3_3_0() { return cCommaKeyword_3_3_0; }

		//sucessors+=[Activity]
		public Assignment getSucessorsAssignment_3_3_1() { return cSucessorsAssignment_3_3_1; }

		//[Activity]
		public CrossReference getSucessorsActivityCrossReference_3_3_1_0() { return cSucessorsActivityCrossReference_3_3_1_0; }

		//ID
		public RuleCall getSucessorsActivityIDTerminalRuleCall_3_3_1_0_1() { return cSucessorsActivityIDTerminalRuleCall_3_3_1_0_1; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3_4() { return cRightSquareBracketKeyword_3_4; }

		//("Calls" businessRule=[BusinessRule|FQN])?
		public Group getGroup_4() { return cGroup_4; }

		//"Calls"
		public Keyword getCallsKeyword_4_0() { return cCallsKeyword_4_0; }

		//businessRule=[BusinessRule|FQN]
		public Assignment getBusinessRuleAssignment_4_1() { return cBusinessRuleAssignment_4_1; }

		//[BusinessRule|FQN]
		public CrossReference getBusinessRuleBusinessRuleCrossReference_4_1_0() { return cBusinessRuleBusinessRuleCrossReference_4_1_0; }

		//FQN
		public RuleCall getBusinessRuleBusinessRuleFQNParserRuleCall_4_1_0_1() { return cBusinessRuleBusinessRuleFQNParserRuleCall_4_1_0_1; }

		//"Description"
		public Keyword getDescriptionKeyword_5() { return cDescriptionKeyword_5; }

		//description="\""
		public Assignment getDescriptionAssignment_6() { return cDescriptionAssignment_6; }

		//"\""
		public Keyword getDescriptionQuotationMarkKeyword_6_0() { return cDescriptionQuotationMarkKeyword_6_0; }

		//-> "\""
		public Keyword getQuotationMarkKeyword_7() { return cQuotationMarkKeyword_7; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}

	public class BusinessRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BusinessRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cImportsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cImportsImportParserRuleCall_0_0 = (RuleCall)cImportsAssignment_0.eContents().get(0);
		private final Keyword cBusinessRuleKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cTypeKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTypAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTypBRETypeEnumRuleCall_4_0 = (RuleCall)cTypAssignment_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cInputKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cLeftSquareBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cSystemInputsAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final Alternatives cSystemInputsAlternatives_8_0 = (Alternatives)cSystemInputsAssignment_8.eContents().get(0);
		private final RuleCall cSystemInputsBreSystemEntityInputParserRuleCall_8_0_0 = (RuleCall)cSystemInputsAlternatives_8_0.eContents().get(0);
		private final RuleCall cSystemInputsBreEntityInputParserRuleCall_8_0_1 = (RuleCall)cSystemInputsAlternatives_8_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cOutputKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Keyword cLeftSquareBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Assignment cOutputAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final CrossReference cOutputEntityCrossReference_12_0 = (CrossReference)cOutputAssignment_12.eContents().get(0);
		private final RuleCall cOutputEntityFQNParserRuleCall_12_0_1 = (RuleCall)cOutputEntityCrossReference_12_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_13 = (Keyword)cGroup.eContents().get(13);
		private final Keyword cRightCurlyBracketKeyword_14 = (Keyword)cGroup.eContents().get(14);
		
		//BusinessRule:
		//	imports+=Import* "BusinessRule" name=ID "type" typ=BREType "{" "Input" "[" systemInputs+=(BreSystemEntityInput |
		//	BreEntityInput)* "]" "Output" "[" output=[Entity|FQN] "]" "}";
		@Override public ParserRule getRule() { return rule; }

		//imports+=Import* "BusinessRule" name=ID "type" typ=BREType "{" "Input" "[" systemInputs+=(BreSystemEntityInput |
		//BreEntityInput)* "]" "Output" "[" output=[Entity|FQN] "]" "}"
		public Group getGroup() { return cGroup; }

		//imports+=Import*
		public Assignment getImportsAssignment_0() { return cImportsAssignment_0; }

		//Import
		public RuleCall getImportsImportParserRuleCall_0_0() { return cImportsImportParserRuleCall_0_0; }

		//"BusinessRule"
		public Keyword getBusinessRuleKeyword_1() { return cBusinessRuleKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//"type"
		public Keyword getTypeKeyword_3() { return cTypeKeyword_3; }

		//typ=BREType
		public Assignment getTypAssignment_4() { return cTypAssignment_4; }

		//BREType
		public RuleCall getTypBRETypeEnumRuleCall_4_0() { return cTypBRETypeEnumRuleCall_4_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }

		//"Input"
		public Keyword getInputKeyword_6() { return cInputKeyword_6; }

		//"["
		public Keyword getLeftSquareBracketKeyword_7() { return cLeftSquareBracketKeyword_7; }

		//systemInputs+=(BreSystemEntityInput | BreEntityInput)*
		public Assignment getSystemInputsAssignment_8() { return cSystemInputsAssignment_8; }

		//BreSystemEntityInput | BreEntityInput
		public Alternatives getSystemInputsAlternatives_8_0() { return cSystemInputsAlternatives_8_0; }

		//BreSystemEntityInput
		public RuleCall getSystemInputsBreSystemEntityInputParserRuleCall_8_0_0() { return cSystemInputsBreSystemEntityInputParserRuleCall_8_0_0; }

		//BreEntityInput
		public RuleCall getSystemInputsBreEntityInputParserRuleCall_8_0_1() { return cSystemInputsBreEntityInputParserRuleCall_8_0_1; }

		//"]"
		public Keyword getRightSquareBracketKeyword_9() { return cRightSquareBracketKeyword_9; }

		//"Output"
		public Keyword getOutputKeyword_10() { return cOutputKeyword_10; }

		//"["
		public Keyword getLeftSquareBracketKeyword_11() { return cLeftSquareBracketKeyword_11; }

		//output=[Entity|FQN]
		public Assignment getOutputAssignment_12() { return cOutputAssignment_12; }

		//[Entity|FQN]
		public CrossReference getOutputEntityCrossReference_12_0() { return cOutputEntityCrossReference_12_0; }

		//FQN
		public RuleCall getOutputEntityFQNParserRuleCall_12_0_1() { return cOutputEntityFQNParserRuleCall_12_0_1; }

		//"]"
		public Keyword getRightSquareBracketKeyword_13() { return cRightSquareBracketKeyword_13; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_14() { return cRightCurlyBracketKeyword_14; }
	}

	public class BreSystemEntityInputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BreSystemEntityInput");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cInputElementAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cInputElementSystemEntityCrossReference_0_0 = (CrossReference)cInputElementAssignment_0.eContents().get(0);
		private final RuleCall cInputElementSystemEntityFQNParserRuleCall_0_0_1 = (RuleCall)cInputElementSystemEntityCrossReference_0_0.eContents().get(1);
		private final Assignment cConfigurationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConfigurationSystemEntityConfigurationParserRuleCall_1_0 = (RuleCall)cConfigurationAssignment_1.eContents().get(0);
		
		//BreSystemEntityInput:
		//	inputElement=[SystemEntity|FQN] configuration+=SystemEntityConfiguration;
		@Override public ParserRule getRule() { return rule; }

		//inputElement=[SystemEntity|FQN] configuration+=SystemEntityConfiguration
		public Group getGroup() { return cGroup; }

		//inputElement=[SystemEntity|FQN]
		public Assignment getInputElementAssignment_0() { return cInputElementAssignment_0; }

		//[SystemEntity|FQN]
		public CrossReference getInputElementSystemEntityCrossReference_0_0() { return cInputElementSystemEntityCrossReference_0_0; }

		//FQN
		public RuleCall getInputElementSystemEntityFQNParserRuleCall_0_0_1() { return cInputElementSystemEntityFQNParserRuleCall_0_0_1; }

		//configuration+=SystemEntityConfiguration
		public Assignment getConfigurationAssignment_1() { return cConfigurationAssignment_1; }

		//SystemEntityConfiguration
		public RuleCall getConfigurationSystemEntityConfigurationParserRuleCall_1_0() { return cConfigurationSystemEntityConfigurationParserRuleCall_1_0; }
	}

	public class BreEntityInputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BreEntityInput");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cInputElementAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cInputElementEntityCrossReference_0_0 = (CrossReference)cInputElementAssignment_0.eContents().get(0);
		private final RuleCall cInputElementEntityFQNParserRuleCall_0_0_1 = (RuleCall)cInputElementEntityCrossReference_0_0.eContents().get(1);
		private final Assignment cConfigurationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConfigurationEntityConfigurationParserRuleCall_1_0 = (RuleCall)cConfigurationAssignment_1.eContents().get(0);
		
		//BreEntityInput:
		//	inputElement=[Entity|FQN] configuration+=EntityConfiguration;
		@Override public ParserRule getRule() { return rule; }

		//inputElement=[Entity|FQN] configuration+=EntityConfiguration
		public Group getGroup() { return cGroup; }

		//inputElement=[Entity|FQN]
		public Assignment getInputElementAssignment_0() { return cInputElementAssignment_0; }

		//[Entity|FQN]
		public CrossReference getInputElementEntityCrossReference_0_0() { return cInputElementEntityCrossReference_0_0; }

		//FQN
		public RuleCall getInputElementEntityFQNParserRuleCall_0_0_1() { return cInputElementEntityFQNParserRuleCall_0_0_1; }

		//configuration+=EntityConfiguration
		public Assignment getConfigurationAssignment_1() { return cConfigurationAssignment_1; }

		//EntityConfiguration
		public RuleCall getConfigurationEntityConfigurationParserRuleCall_1_0() { return cConfigurationEntityConfigurationParserRuleCall_1_0; }
	}

	public class SystemEntityConfigurationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SystemEntityConfiguration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSystemEntityConfigurationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cPrimärKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPrimaryAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPrimaryBooleanEnumRuleCall_4_0 = (RuleCall)cPrimaryAssignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cObligatorischKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cEqualsSignKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cObligatorischAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cObligatorischBooleanEnumRuleCall_8_0 = (RuleCall)cObligatorischAssignment_8.eContents().get(0);
		private final Keyword cCommaKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cMehrfachKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Keyword cEqualsSignKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Assignment cMultipleAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cMultipleBooleanEnumRuleCall_12_0 = (RuleCall)cMultipleAssignment_12.eContents().get(0);
		private final Group cGroup_13 = (Group)cGroup.eContents().get(13);
		private final Keyword cCommaKeyword_13_0 = (Keyword)cGroup_13.eContents().get(0);
		private final Keyword cJoinPfadKeyword_13_1 = (Keyword)cGroup_13.eContents().get(1);
		private final Keyword cEqualsSignKeyword_13_2 = (Keyword)cGroup_13.eContents().get(2);
		private final Assignment cJoinCriteriaAssignment_13_3 = (Assignment)cGroup_13.eContents().get(3);
		private final RuleCall cJoinCriteriaSTRINGTerminalRuleCall_13_3_0 = (RuleCall)cJoinCriteriaAssignment_13_3.eContents().get(0);
		
		//SystemEntityConfiguration:
		//	{SystemEntityConfiguration} "{" "primär" "=" primary=Boolean "," "obligatorisch" "=" obligatorisch=Boolean ","
		//	"mehrfach" "=" multiple=Boolean ("," "join Pfad" "=" joinCriteria=STRING)?;
		@Override public ParserRule getRule() { return rule; }

		//{SystemEntityConfiguration} "{" "primär" "=" primary=Boolean "," "obligatorisch" "=" obligatorisch=Boolean ","
		//"mehrfach" "=" multiple=Boolean ("," "join Pfad" "=" joinCriteria=STRING)?
		public Group getGroup() { return cGroup; }

		//{SystemEntityConfiguration}
		public Action getSystemEntityConfigurationAction_0() { return cSystemEntityConfigurationAction_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//"primär"
		public Keyword getPrimärKeyword_2() { return cPrimärKeyword_2; }

		//"="
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }

		//primary=Boolean
		public Assignment getPrimaryAssignment_4() { return cPrimaryAssignment_4; }

		//Boolean
		public RuleCall getPrimaryBooleanEnumRuleCall_4_0() { return cPrimaryBooleanEnumRuleCall_4_0; }

		//","
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }

		//"obligatorisch"
		public Keyword getObligatorischKeyword_6() { return cObligatorischKeyword_6; }

		//"="
		public Keyword getEqualsSignKeyword_7() { return cEqualsSignKeyword_7; }

		//obligatorisch=Boolean
		public Assignment getObligatorischAssignment_8() { return cObligatorischAssignment_8; }

		//Boolean
		public RuleCall getObligatorischBooleanEnumRuleCall_8_0() { return cObligatorischBooleanEnumRuleCall_8_0; }

		//","
		public Keyword getCommaKeyword_9() { return cCommaKeyword_9; }

		//"mehrfach"
		public Keyword getMehrfachKeyword_10() { return cMehrfachKeyword_10; }

		//"="
		public Keyword getEqualsSignKeyword_11() { return cEqualsSignKeyword_11; }

		//multiple=Boolean
		public Assignment getMultipleAssignment_12() { return cMultipleAssignment_12; }

		//Boolean
		public RuleCall getMultipleBooleanEnumRuleCall_12_0() { return cMultipleBooleanEnumRuleCall_12_0; }

		//("," "join Pfad" "=" joinCriteria=STRING)?
		public Group getGroup_13() { return cGroup_13; }

		//","
		public Keyword getCommaKeyword_13_0() { return cCommaKeyword_13_0; }

		//"join Pfad"
		public Keyword getJoinPfadKeyword_13_1() { return cJoinPfadKeyword_13_1; }

		//"="
		public Keyword getEqualsSignKeyword_13_2() { return cEqualsSignKeyword_13_2; }

		//joinCriteria=STRING
		public Assignment getJoinCriteriaAssignment_13_3() { return cJoinCriteriaAssignment_13_3; }

		//STRING
		public RuleCall getJoinCriteriaSTRINGTerminalRuleCall_13_3_0() { return cJoinCriteriaSTRINGTerminalRuleCall_13_3_0; }
	}

	public class EntityConfigurationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EntityConfiguration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEntityConfigurationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cPrimärKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPrimaryAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPrimaryBooleanEnumRuleCall_4_0 = (RuleCall)cPrimaryAssignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cObligatorischKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cEqualsSignKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cObligatorischAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cObligatorischBooleanEnumRuleCall_8_0 = (RuleCall)cObligatorischAssignment_8.eContents().get(0);
		private final Keyword cCommaKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cMehrfachKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Keyword cEqualsSignKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Assignment cMultipleAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cMultipleBooleanEnumRuleCall_12_0 = (RuleCall)cMultipleAssignment_12.eContents().get(0);
		private final Group cGroup_13 = (Group)cGroup.eContents().get(13);
		private final Keyword cCommaKeyword_13_0 = (Keyword)cGroup_13.eContents().get(0);
		private final Keyword cPfadKeyword_13_1 = (Keyword)cGroup_13.eContents().get(1);
		private final Keyword cEqualsSignKeyword_13_2 = (Keyword)cGroup_13.eContents().get(2);
		private final Assignment cPathAssignment_13_3 = (Assignment)cGroup_13.eContents().get(3);
		private final CrossReference cPathAssociationCrossReference_13_3_0 = (CrossReference)cPathAssignment_13_3.eContents().get(0);
		private final RuleCall cPathAssociationFQNParserRuleCall_13_3_0_1 = (RuleCall)cPathAssociationCrossReference_13_3_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_14 = (Keyword)cGroup.eContents().get(14);
		
		//EntityConfiguration:
		//	{EntityConfiguration} "{" "primär" "=" primary=Boolean "," "obligatorisch" "=" obligatorisch=Boolean "," "mehrfach"
		//	"=" multiple=Boolean ("," "Pfad" "=" path=[Association|FQN])? "}";
		@Override public ParserRule getRule() { return rule; }

		//{EntityConfiguration} "{" "primär" "=" primary=Boolean "," "obligatorisch" "=" obligatorisch=Boolean "," "mehrfach" "="
		//multiple=Boolean ("," "Pfad" "=" path=[Association|FQN])? "}"
		public Group getGroup() { return cGroup; }

		//{EntityConfiguration}
		public Action getEntityConfigurationAction_0() { return cEntityConfigurationAction_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//"primär"
		public Keyword getPrimärKeyword_2() { return cPrimärKeyword_2; }

		//"="
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }

		//primary=Boolean
		public Assignment getPrimaryAssignment_4() { return cPrimaryAssignment_4; }

		//Boolean
		public RuleCall getPrimaryBooleanEnumRuleCall_4_0() { return cPrimaryBooleanEnumRuleCall_4_0; }

		//","
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }

		//"obligatorisch"
		public Keyword getObligatorischKeyword_6() { return cObligatorischKeyword_6; }

		//"="
		public Keyword getEqualsSignKeyword_7() { return cEqualsSignKeyword_7; }

		//obligatorisch=Boolean
		public Assignment getObligatorischAssignment_8() { return cObligatorischAssignment_8; }

		//Boolean
		public RuleCall getObligatorischBooleanEnumRuleCall_8_0() { return cObligatorischBooleanEnumRuleCall_8_0; }

		//","
		public Keyword getCommaKeyword_9() { return cCommaKeyword_9; }

		//"mehrfach"
		public Keyword getMehrfachKeyword_10() { return cMehrfachKeyword_10; }

		//"="
		public Keyword getEqualsSignKeyword_11() { return cEqualsSignKeyword_11; }

		//multiple=Boolean
		public Assignment getMultipleAssignment_12() { return cMultipleAssignment_12; }

		//Boolean
		public RuleCall getMultipleBooleanEnumRuleCall_12_0() { return cMultipleBooleanEnumRuleCall_12_0; }

		//("," "Pfad" "=" path=[Association|FQN])?
		public Group getGroup_13() { return cGroup_13; }

		//","
		public Keyword getCommaKeyword_13_0() { return cCommaKeyword_13_0; }

		//"Pfad"
		public Keyword getPfadKeyword_13_1() { return cPfadKeyword_13_1; }

		//"="
		public Keyword getEqualsSignKeyword_13_2() { return cEqualsSignKeyword_13_2; }

		//path=[Association|FQN]
		public Assignment getPathAssignment_13_3() { return cPathAssignment_13_3; }

		//[Association|FQN]
		public CrossReference getPathAssociationCrossReference_13_3_0() { return cPathAssociationCrossReference_13_3_0; }

		//FQN
		public RuleCall getPathAssociationFQNParserRuleCall_13_3_0_1() { return cPathAssociationFQNParserRuleCall_13_3_0_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_14() { return cRightCurlyBracketKeyword_14; }
	}

	public class SystemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "System");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSourceSystemKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSrcEntitiesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSrcEntitiesSystemEntityParserRuleCall_3_0 = (RuleCall)cSrcEntitiesAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//System:
		//	"SourceSystem" name=ID "{" srcEntities+=SystemEntity "}";
		@Override public ParserRule getRule() { return rule; }

		//"SourceSystem" name=ID "{" srcEntities+=SystemEntity "}"
		public Group getGroup() { return cGroup; }

		//"SourceSystem"
		public Keyword getSourceSystemKeyword_0() { return cSourceSystemKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//srcEntities+=SystemEntity
		public Assignment getSrcEntitiesAssignment_3() { return cSrcEntitiesAssignment_3; }

		//SystemEntity
		public RuleCall getSrcEntitiesSystemEntityParserRuleCall_3_0() { return cSrcEntitiesSystemEntityParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class SystemEntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SystemEntity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNameKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cFormatKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFormatAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFormatSTRINGTerminalRuleCall_3_0 = (RuleCall)cFormatAssignment_3.eContents().get(0);
		
		//SystemEntity:
		//	"Name" name=ID "Format" format=STRING;
		@Override public ParserRule getRule() { return rule; }

		//"Name" name=ID "Format" format=STRING
		public Group getGroup() { return cGroup; }

		//"Name"
		public Keyword getNameKeyword_0() { return cNameKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"Format"
		public Keyword getFormatKeyword_2() { return cFormatKeyword_2; }

		//format=STRING
		public Assignment getFormatAssignment_3() { return cFormatAssignment_3; }

		//STRING
		public RuleCall getFormatSTRINGTerminalRuleCall_3_0() { return cFormatSTRINGTerminalRuleCall_3_0; }
	}

	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportedNamespaceFqnWithWildCardParserRuleCall_1_0 = (RuleCall)cImportedNamespaceAssignment_1.eContents().get(0);
		
		//Import:
		//	"Import" importedNamespace=FqnWithWildCard;
		@Override public ParserRule getRule() { return rule; }

		//"Import" importedNamespace=FqnWithWildCard
		public Group getGroup() { return cGroup; }

		//"Import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//importedNamespace=FqnWithWildCard
		public Assignment getImportedNamespaceAssignment_1() { return cImportedNamespaceAssignment_1; }

		//FqnWithWildCard
		public RuleCall getImportedNamespaceFqnWithWildCardParserRuleCall_1_0() { return cImportedNamespaceFqnWithWildCardParserRuleCall_1_0; }
	}

	public class FqnWithWildCardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FqnWithWildCard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFQNParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//FqnWithWildCard:
		//	FQN ".*"?;
		@Override public ParserRule getRule() { return rule; }

		//FQN ".*"?
		public Group getGroup() { return cGroup; }

		//FQN
		public RuleCall getFQNParserRuleCall_0() { return cFQNParserRuleCall_0; }

		//".*"?
		public Keyword getFullStopAsteriskKeyword_1() { return cFullStopAsteriskKeyword_1; }
	}

	public class DiagramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Diagram");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cImportsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cImportsImportParserRuleCall_0_0 = (RuleCall)cImportsAssignment_0.eContents().get(0);
		private final Keyword cDiagramKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cIncludesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cIncludesIncludeParserRuleCall_4_0 = (RuleCall)cIncludesAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Diagram:
		//	imports+=Import* "Diagram" name=ID "{" includes+=Include* "}";
		@Override public ParserRule getRule() { return rule; }

		//imports+=Import* "Diagram" name=ID "{" includes+=Include* "}"
		public Group getGroup() { return cGroup; }

		//imports+=Import*
		public Assignment getImportsAssignment_0() { return cImportsAssignment_0; }

		//Import
		public RuleCall getImportsImportParserRuleCall_0_0() { return cImportsImportParserRuleCall_0_0; }

		//"Diagram"
		public Keyword getDiagramKeyword_1() { return cDiagramKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//includes+=Include*
		public Assignment getIncludesAssignment_4() { return cIncludesAssignment_4; }

		//Include
		public RuleCall getIncludesIncludeParserRuleCall_4_0() { return cIncludesIncludeParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class IncludeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Include");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIncludeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cIncludeAlternatives_0_0 = (Alternatives)cIncludeAssignment_0.eContents().get(0);
		private final Keyword cIncludeIncludeKeyword_0_0_0 = (Keyword)cIncludeAlternatives_0_0.eContents().get(0);
		private final Keyword cIncludeExcludeKeyword_0_0_1 = (Keyword)cIncludeAlternatives_0_0.eContents().get(1);
		private final Assignment cEntityAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cEntityEntityCrossReference_1_0 = (CrossReference)cEntityAssignment_1.eContents().get(0);
		private final RuleCall cEntityEntityFQNParserRuleCall_1_0_1 = (RuleCall)cEntityEntityCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cWithKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cFieldsAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final CrossReference cFieldsPropertyCrossReference_2_2_0 = (CrossReference)cFieldsAssignment_2_2.eContents().get(0);
		private final RuleCall cFieldsPropertyIDTerminalRuleCall_2_2_0_1 = (RuleCall)cFieldsPropertyCrossReference_2_2_0.eContents().get(1);
		private final Group cGroup_2_3 = (Group)cGroup_2.eContents().get(3);
		private final Keyword cCommaKeyword_2_3_0 = (Keyword)cGroup_2_3.eContents().get(0);
		private final Assignment cFieldsAssignment_2_3_1 = (Assignment)cGroup_2_3.eContents().get(1);
		private final CrossReference cFieldsPropertyCrossReference_2_3_1_0 = (CrossReference)cFieldsAssignment_2_3_1.eContents().get(0);
		private final RuleCall cFieldsPropertyIDTerminalRuleCall_2_3_1_0_1 = (RuleCall)cFieldsPropertyCrossReference_2_3_1_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		
		//Include:
		//	include=("Include" | "Exclude") entity=[Entity|FQN] ("with" "{" fields+=[Property] ("," fields+=[Property])* "}");
		@Override public ParserRule getRule() { return rule; }

		//include=("Include" | "Exclude") entity=[Entity|FQN] ("with" "{" fields+=[Property] ("," fields+=[Property])* "}")
		public Group getGroup() { return cGroup; }

		//include=("Include" | "Exclude")
		public Assignment getIncludeAssignment_0() { return cIncludeAssignment_0; }

		//"Include" | "Exclude"
		public Alternatives getIncludeAlternatives_0_0() { return cIncludeAlternatives_0_0; }

		//"Include"
		public Keyword getIncludeIncludeKeyword_0_0_0() { return cIncludeIncludeKeyword_0_0_0; }

		//"Exclude"
		public Keyword getIncludeExcludeKeyword_0_0_1() { return cIncludeExcludeKeyword_0_0_1; }

		//entity=[Entity|FQN]
		public Assignment getEntityAssignment_1() { return cEntityAssignment_1; }

		//[Entity|FQN]
		public CrossReference getEntityEntityCrossReference_1_0() { return cEntityEntityCrossReference_1_0; }

		//FQN
		public RuleCall getEntityEntityFQNParserRuleCall_1_0_1() { return cEntityEntityFQNParserRuleCall_1_0_1; }

		//"with" "{" fields+=[Property] ("," fields+=[Property])* "}"
		public Group getGroup_2() { return cGroup_2; }

		//"with"
		public Keyword getWithKeyword_2_0() { return cWithKeyword_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_1() { return cLeftCurlyBracketKeyword_2_1; }

		//fields+=[Property]
		public Assignment getFieldsAssignment_2_2() { return cFieldsAssignment_2_2; }

		//[Property]
		public CrossReference getFieldsPropertyCrossReference_2_2_0() { return cFieldsPropertyCrossReference_2_2_0; }

		//ID
		public RuleCall getFieldsPropertyIDTerminalRuleCall_2_2_0_1() { return cFieldsPropertyIDTerminalRuleCall_2_2_0_1; }

		//("," fields+=[Property])*
		public Group getGroup_2_3() { return cGroup_2_3; }

		//","
		public Keyword getCommaKeyword_2_3_0() { return cCommaKeyword_2_3_0; }

		//fields+=[Property]
		public Assignment getFieldsAssignment_2_3_1() { return cFieldsAssignment_2_3_1; }

		//[Property]
		public CrossReference getFieldsPropertyCrossReference_2_3_1_0() { return cFieldsPropertyCrossReference_2_3_1_0; }

		//ID
		public RuleCall getFieldsPropertyIDTerminalRuleCall_2_3_1_0_1() { return cFieldsPropertyIDTerminalRuleCall_2_3_1_0_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_4() { return cRightCurlyBracketKeyword_2_4; }
	}

	public class EnumDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnumDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnumerationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValuesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValuesIDTerminalRuleCall_3_0 = (RuleCall)cValuesAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_4_1 = (RuleCall)cGroup_4.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//EnumDeclaration:
		//	"Enumeration" name=ID "{" values+=ID ("," ID)* "}";
		@Override public ParserRule getRule() { return rule; }

		//"Enumeration" name=ID "{" values+=ID ("," ID)* "}"
		public Group getGroup() { return cGroup; }

		//"Enumeration"
		public Keyword getEnumerationKeyword_0() { return cEnumerationKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//values+=ID
		public Assignment getValuesAssignment_3() { return cValuesAssignment_3; }

		//ID
		public RuleCall getValuesIDTerminalRuleCall_3_0() { return cValuesIDTerminalRuleCall_3_0; }

		//("," ID)*
		public Group getGroup_4() { return cGroup_4; }

		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_4_1() { return cIDTerminalRuleCall_4_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class FQNElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FQN");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//FQN:
		//	ID ("." ID)*;
		@Override public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class EntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Entity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEntityKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPropertiesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPropertiesPropertyParserRuleCall_3_0 = (RuleCall)cPropertiesAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Entity:
		//	"Entity" name=ID "{" properties+=Property* "}";
		@Override public ParserRule getRule() { return rule; }

		//"Entity" name=ID "{" properties+=Property* "}"
		public Group getGroup() { return cGroup; }

		//"Entity"
		public Keyword getEntityKeyword_0() { return cEntityKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//properties+=Property*
		public Assignment getPropertiesAssignment_3() { return cPropertiesAssignment_3; }

		//Property
		public RuleCall getPropertiesPropertyParserRuleCall_3_0() { return cPropertiesPropertyParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class DomainElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Domain");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cImportsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cImportsImportParserRuleCall_0_0 = (RuleCall)cImportsAssignment_0.eContents().get(0);
		private final Keyword cDomainKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cDescriptionKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cDescriptionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_4_0 = (RuleCall)cDescriptionAssignment_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cEntitiesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cEntitiesEntityParserRuleCall_6_0 = (RuleCall)cEntitiesAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Domain:
		//	imports+=Import* "Domain" name=ID "Description: " description=STRING "{" entities+=Entity+ "}";
		@Override public ParserRule getRule() { return rule; }

		//imports+=Import* "Domain" name=ID "Description: " description=STRING "{" entities+=Entity+ "}"
		public Group getGroup() { return cGroup; }

		//imports+=Import*
		public Assignment getImportsAssignment_0() { return cImportsAssignment_0; }

		//Import
		public RuleCall getImportsImportParserRuleCall_0_0() { return cImportsImportParserRuleCall_0_0; }

		//"Domain"
		public Keyword getDomainKeyword_1() { return cDomainKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//"Description: "
		public Keyword getDescriptionKeyword_3() { return cDescriptionKeyword_3; }

		//description=STRING
		public Assignment getDescriptionAssignment_4() { return cDescriptionAssignment_4; }

		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_4_0() { return cDescriptionSTRINGTerminalRuleCall_4_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }

		//entities+=Entity+
		public Assignment getEntitiesAssignment_6() { return cEntitiesAssignment_6; }

		//Entity
		public RuleCall getEntitiesEntityParserRuleCall_6_0() { return cEntitiesEntityParserRuleCall_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class PropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Property");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFieldParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAssociationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Property:
		//	Field | Association;
		@Override public ParserRule getRule() { return rule; }

		//Field | Association
		public Alternatives getAlternatives() { return cAlternatives; }

		//Field
		public RuleCall getFieldParserRuleCall_0() { return cFieldParserRuleCall_0; }

		//Association
		public RuleCall getAssociationParserRuleCall_1() { return cAssociationParserRuleCall_1; }
	}

	public class AssociationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Association");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRelationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cTypeEntityCrossReference_3_0 = (CrossReference)cTypeAssignment_3.eContents().get(0);
		private final RuleCall cTypeEntityFQNParserRuleCall_3_0_1 = (RuleCall)cTypeEntityCrossReference_3_0.eContents().get(1);
		private final Assignment cMultiplicityAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cMultiplicityMultiplictyEnumRuleCall_4_0 = (RuleCall)cMultiplicityAssignment_4.eContents().get(0);
		
		//Association:
		//	"Relation" name=ID ":" type=[Entity|FQN] multiplicity=Multiplicty;
		@Override public ParserRule getRule() { return rule; }

		//"Relation" name=ID ":" type=[Entity|FQN] multiplicity=Multiplicty
		public Group getGroup() { return cGroup; }

		//"Relation"
		public Keyword getRelationKeyword_0() { return cRelationKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//type=[Entity|FQN]
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//[Entity|FQN]
		public CrossReference getTypeEntityCrossReference_3_0() { return cTypeEntityCrossReference_3_0; }

		//FQN
		public RuleCall getTypeEntityFQNParserRuleCall_3_0_1() { return cTypeEntityFQNParserRuleCall_3_0_1; }

		//multiplicity=Multiplicty
		public Assignment getMultiplicityAssignment_4() { return cMultiplicityAssignment_4; }

		//Multiplicty
		public RuleCall getMultiplicityMultiplictyEnumRuleCall_4_0() { return cMultiplicityMultiplictyEnumRuleCall_4_0; }
	}

	public class FieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Field");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFieldKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLiteralAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLiteralLiteralParserRuleCall_3_0 = (RuleCall)cLiteralAssignment_3.eContents().get(0);
		
		//Field:
		//	"Field" name=ID ":" literal=Literal;
		@Override public ParserRule getRule() { return rule; }

		//"Field" name=ID ":" literal=Literal
		public Group getGroup() { return cGroup; }

		//"Field"
		public Keyword getFieldKeyword_0() { return cFieldKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//literal=Literal
		public Assignment getLiteralAssignment_3() { return cLiteralAssignment_3; }

		//Literal
		public RuleCall getLiteralLiteralParserRuleCall_3_0() { return cLiteralLiteralParserRuleCall_3_0; }
	}

	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Literal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cLiteralAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Keyword cNameDecimalKeyword_0_1_0 = (Keyword)cNameAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cLiteralAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cNameMoneyKeyword_1_1_0 = (Keyword)cNameAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cLiteralAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cNameAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final Keyword cNameTextKeyword_2_1_0 = (Keyword)cNameAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cLiteralAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cNameAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final Keyword cNameBooleanKeyword_3_1_0 = (Keyword)cNameAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cLiteralAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Assignment cNameAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final Keyword cNameIntKeyword_4_1_0 = (Keyword)cNameAssignment_4_1.eContents().get(0);
		private final RuleCall cEnumParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//Literal:
		//	{Literal} name="Decimal" | {Literal} name="Money" | {Literal} name="Text" | {Literal} name="Boolean" | {Literal}
		//	name="Int" | Enum;
		@Override public ParserRule getRule() { return rule; }

		//{Literal} name="Decimal" | {Literal} name="Money" | {Literal} name="Text" | {Literal} name="Boolean" | {Literal}
		//name="Int" | Enum
		public Alternatives getAlternatives() { return cAlternatives; }

		//{Literal} name="Decimal"
		public Group getGroup_0() { return cGroup_0; }

		//{Literal}
		public Action getLiteralAction_0_0() { return cLiteralAction_0_0; }

		//name="Decimal"
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }

		//"Decimal"
		public Keyword getNameDecimalKeyword_0_1_0() { return cNameDecimalKeyword_0_1_0; }

		//{Literal} name="Money"
		public Group getGroup_1() { return cGroup_1; }

		//{Literal}
		public Action getLiteralAction_1_0() { return cLiteralAction_1_0; }

		//name="Money"
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }

		//"Money"
		public Keyword getNameMoneyKeyword_1_1_0() { return cNameMoneyKeyword_1_1_0; }

		//{Literal} name="Text"
		public Group getGroup_2() { return cGroup_2; }

		//{Literal}
		public Action getLiteralAction_2_0() { return cLiteralAction_2_0; }

		//name="Text"
		public Assignment getNameAssignment_2_1() { return cNameAssignment_2_1; }

		//"Text"
		public Keyword getNameTextKeyword_2_1_0() { return cNameTextKeyword_2_1_0; }

		//{Literal} name="Boolean"
		public Group getGroup_3() { return cGroup_3; }

		//{Literal}
		public Action getLiteralAction_3_0() { return cLiteralAction_3_0; }

		//name="Boolean"
		public Assignment getNameAssignment_3_1() { return cNameAssignment_3_1; }

		//"Boolean"
		public Keyword getNameBooleanKeyword_3_1_0() { return cNameBooleanKeyword_3_1_0; }

		//{Literal} name="Int"
		public Group getGroup_4() { return cGroup_4; }

		//{Literal}
		public Action getLiteralAction_4_0() { return cLiteralAction_4_0; }

		//name="Int"
		public Assignment getNameAssignment_4_1() { return cNameAssignment_4_1; }

		//"Int"
		public Keyword getNameIntKeyword_4_1_0() { return cNameIntKeyword_4_1_0; }

		//Enum
		public RuleCall getEnumParserRuleCall_5() { return cEnumParserRuleCall_5; }
	}

	public class EnumElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Enum");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnumKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTypeEnumDeclarationCrossReference_1_0 = (CrossReference)cTypeAssignment_1.eContents().get(0);
		private final RuleCall cTypeEnumDeclarationIDTerminalRuleCall_1_0_1 = (RuleCall)cTypeEnumDeclarationCrossReference_1_0.eContents().get(1);
		
		//Enum:
		//	"Enum" type=[EnumDeclaration];
		@Override public ParserRule getRule() { return rule; }

		//"Enum" type=[EnumDeclaration]
		public Group getGroup() { return cGroup; }

		//"Enum"
		public Keyword getEnumKeyword_0() { return cEnumKeyword_0; }

		//type=[EnumDeclaration]
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//[EnumDeclaration]
		public CrossReference getTypeEnumDeclarationCrossReference_1_0() { return cTypeEnumDeclarationCrossReference_1_0; }

		//ID
		public RuleCall getTypeEnumDeclarationIDTerminalRuleCall_1_0_1() { return cTypeEnumDeclarationIDTerminalRuleCall_1_0_1; }
	}
	
	
	public class BooleanElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Boolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cTrueEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cTrueJKeyword_0_0 = (Keyword)cTrueEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cFalseEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cFalseFKeyword_1_0 = (Keyword)cFalseEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum Boolean:
		//	true="J" | false="F";
		public EnumRule getRule() { return rule; }

		//true="J" | false="F"
		public Alternatives getAlternatives() { return cAlternatives; }

		//true="J"
		public EnumLiteralDeclaration getTrueEnumLiteralDeclaration_0() { return cTrueEnumLiteralDeclaration_0; }

		//"J"
		public Keyword getTrueJKeyword_0_0() { return cTrueJKeyword_0_0; }

		//false="F"
		public EnumLiteralDeclaration getFalseEnumLiteralDeclaration_1() { return cFalseEnumLiteralDeclaration_1; }

		//"F"
		public Keyword getFalseFKeyword_1_0() { return cFalseFKeyword_1_0; }
	}

	public class BRETypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "BREType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cBizToBizEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cBizToBizBizToBizKeyword_0_0 = (Keyword)cBizToBizEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSrcToBizEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSrcToBizSrcToBizKeyword_1_0 = (Keyword)cSrcToBizEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cBizToOutEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cBizToOutBizToOutKeyword_2_0 = (Keyword)cBizToOutEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum BREType:
		//	BizToBiz | SrcToBiz | BizToOut;
		public EnumRule getRule() { return rule; }

		//BizToBiz | SrcToBiz | BizToOut
		public Alternatives getAlternatives() { return cAlternatives; }

		//BizToBiz
		public EnumLiteralDeclaration getBizToBizEnumLiteralDeclaration_0() { return cBizToBizEnumLiteralDeclaration_0; }

		//"BizToBiz"
		public Keyword getBizToBizBizToBizKeyword_0_0() { return cBizToBizBizToBizKeyword_0_0; }

		//SrcToBiz
		public EnumLiteralDeclaration getSrcToBizEnumLiteralDeclaration_1() { return cSrcToBizEnumLiteralDeclaration_1; }

		//"SrcToBiz"
		public Keyword getSrcToBizSrcToBizKeyword_1_0() { return cSrcToBizSrcToBizKeyword_1_0; }

		//BizToOut
		public EnumLiteralDeclaration getBizToOutEnumLiteralDeclaration_2() { return cBizToOutEnumLiteralDeclaration_2; }

		//"BizToOut"
		public Keyword getBizToOutBizToOutKeyword_2_0() { return cBizToOutBizToOutKeyword_2_0; }
	}

	public class MultiplictyElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Multiplicty");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cOneToManyEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cOneToMany1NKeyword_0_0 = (Keyword)cOneToManyEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cZeroToManyEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cZeroToMany0NKeyword_1_0 = (Keyword)cZeroToManyEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cOneToOneEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cOneToOne1Keyword_2_0 = (Keyword)cOneToOneEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum Multiplicty:
		//	OneToMany="1..N" | ZeroToMany="0..N" | OneToOne="1";
		public EnumRule getRule() { return rule; }

		//OneToMany="1..N" | ZeroToMany="0..N" | OneToOne="1"
		public Alternatives getAlternatives() { return cAlternatives; }

		//OneToMany="1..N"
		public EnumLiteralDeclaration getOneToManyEnumLiteralDeclaration_0() { return cOneToManyEnumLiteralDeclaration_0; }

		//"1..N"
		public Keyword getOneToMany1NKeyword_0_0() { return cOneToMany1NKeyword_0_0; }

		//ZeroToMany="0..N"
		public EnumLiteralDeclaration getZeroToManyEnumLiteralDeclaration_1() { return cZeroToManyEnumLiteralDeclaration_1; }

		//"0..N"
		public Keyword getZeroToMany0NKeyword_1_0() { return cZeroToMany0NKeyword_1_0; }

		//OneToOne="1"
		public EnumLiteralDeclaration getOneToOneEnumLiteralDeclaration_2() { return cOneToOneEnumLiteralDeclaration_2; }

		//"1"
		public Keyword getOneToOne1Keyword_2_0() { return cOneToOne1Keyword_2_0; }
	}
	
	private final ModelElements pModel;
	private final ElementElements pElement;
	private final FlowElements pFlow;
	private final ActivityElements pActivity;
	private final BusinessRuleElements pBusinessRule;
	private final BreSystemEntityInputElements pBreSystemEntityInput;
	private final BreEntityInputElements pBreEntityInput;
	private final SystemEntityConfigurationElements pSystemEntityConfiguration;
	private final EntityConfigurationElements pEntityConfiguration;
	private final BooleanElements unknownRuleBoolean;
	private final BRETypeElements unknownRuleBREType;
	private final SystemElements pSystem;
	private final SystemEntityElements pSystemEntity;
	private final ImportElements pImport;
	private final FqnWithWildCardElements pFqnWithWildCard;
	private final DiagramElements pDiagram;
	private final IncludeElements pInclude;
	private final EnumDeclarationElements pEnumDeclaration;
	private final FQNElements pFQN;
	private final EntityElements pEntity;
	private final DomainElements pDomain;
	private final PropertyElements pProperty;
	private final AssociationElements pAssociation;
	private final MultiplictyElements unknownRuleMultiplicty;
	private final FieldElements pField;
	private final LiteralElements pLiteral;
	private final EnumElements pEnum;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public EsplmGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pElement = new ElementElements();
		this.pFlow = new FlowElements();
		this.pActivity = new ActivityElements();
		this.pBusinessRule = new BusinessRuleElements();
		this.pBreSystemEntityInput = new BreSystemEntityInputElements();
		this.pBreEntityInput = new BreEntityInputElements();
		this.pSystemEntityConfiguration = new SystemEntityConfigurationElements();
		this.pEntityConfiguration = new EntityConfigurationElements();
		this.unknownRuleBoolean = new BooleanElements();
		this.unknownRuleBREType = new BRETypeElements();
		this.pSystem = new SystemElements();
		this.pSystemEntity = new SystemEntityElements();
		this.pImport = new ImportElements();
		this.pFqnWithWildCard = new FqnWithWildCardElements();
		this.pDiagram = new DiagramElements();
		this.pInclude = new IncludeElements();
		this.pEnumDeclaration = new EnumDeclarationElements();
		this.pFQN = new FQNElements();
		this.pEntity = new EntityElements();
		this.pDomain = new DomainElements();
		this.pProperty = new PropertyElements();
		this.pAssociation = new AssociationElements();
		this.unknownRuleMultiplicty = new MultiplictyElements();
		this.pField = new FieldElements();
		this.pLiteral = new LiteralElements();
		this.pEnum = new EnumElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.pklose.espl.Esplm".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	elements+=Element;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Element:
	//	EnumDeclaration | Diagram | Domain | Flow | BusinessRule | System;
	public ElementElements getElementAccess() {
		return pElement;
	}
	
	public ParserRule getElementRule() {
		return getElementAccess().getRule();
	}

	//Flow:
	//	imports+=Import* "Flow" name=ID "{" activities+=Activity* "}";
	public FlowElements getFlowAccess() {
		return pFlow;
	}
	
	public ParserRule getFlowRule() {
		return getFlowAccess().getRule();
	}

	//Activity:
	//	"Activity" name=ID "{" ("Successors" "[" sucessors+=[Activity] ("," sucessors+=[Activity])* "]")? ("Calls"
	//	businessRule=[BusinessRule|FQN])? "Description" description="\"" -> "\"" "}";
	public ActivityElements getActivityAccess() {
		return pActivity;
	}
	
	public ParserRule getActivityRule() {
		return getActivityAccess().getRule();
	}

	//BusinessRule:
	//	imports+=Import* "BusinessRule" name=ID "type" typ=BREType "{" "Input" "[" systemInputs+=(BreSystemEntityInput |
	//	BreEntityInput)* "]" "Output" "[" output=[Entity|FQN] "]" "}";
	public BusinessRuleElements getBusinessRuleAccess() {
		return pBusinessRule;
	}
	
	public ParserRule getBusinessRuleRule() {
		return getBusinessRuleAccess().getRule();
	}

	//BreSystemEntityInput:
	//	inputElement=[SystemEntity|FQN] configuration+=SystemEntityConfiguration;
	public BreSystemEntityInputElements getBreSystemEntityInputAccess() {
		return pBreSystemEntityInput;
	}
	
	public ParserRule getBreSystemEntityInputRule() {
		return getBreSystemEntityInputAccess().getRule();
	}

	//BreEntityInput:
	//	inputElement=[Entity|FQN] configuration+=EntityConfiguration;
	public BreEntityInputElements getBreEntityInputAccess() {
		return pBreEntityInput;
	}
	
	public ParserRule getBreEntityInputRule() {
		return getBreEntityInputAccess().getRule();
	}

	//SystemEntityConfiguration:
	//	{SystemEntityConfiguration} "{" "primär" "=" primary=Boolean "," "obligatorisch" "=" obligatorisch=Boolean ","
	//	"mehrfach" "=" multiple=Boolean ("," "join Pfad" "=" joinCriteria=STRING)?;
	public SystemEntityConfigurationElements getSystemEntityConfigurationAccess() {
		return pSystemEntityConfiguration;
	}
	
	public ParserRule getSystemEntityConfigurationRule() {
		return getSystemEntityConfigurationAccess().getRule();
	}

	//EntityConfiguration:
	//	{EntityConfiguration} "{" "primär" "=" primary=Boolean "," "obligatorisch" "=" obligatorisch=Boolean "," "mehrfach"
	//	"=" multiple=Boolean ("," "Pfad" "=" path=[Association|FQN])? "}";
	public EntityConfigurationElements getEntityConfigurationAccess() {
		return pEntityConfiguration;
	}
	
	public ParserRule getEntityConfigurationRule() {
		return getEntityConfigurationAccess().getRule();
	}

	//enum Boolean:
	//	true="J" | false="F";
	public BooleanElements getBooleanAccess() {
		return unknownRuleBoolean;
	}
	
	public EnumRule getBooleanRule() {
		return getBooleanAccess().getRule();
	}

	//enum BREType:
	//	BizToBiz | SrcToBiz | BizToOut;
	public BRETypeElements getBRETypeAccess() {
		return unknownRuleBREType;
	}
	
	public EnumRule getBRETypeRule() {
		return getBRETypeAccess().getRule();
	}

	//System:
	//	"SourceSystem" name=ID "{" srcEntities+=SystemEntity "}";
	public SystemElements getSystemAccess() {
		return pSystem;
	}
	
	public ParserRule getSystemRule() {
		return getSystemAccess().getRule();
	}

	//SystemEntity:
	//	"Name" name=ID "Format" format=STRING;
	public SystemEntityElements getSystemEntityAccess() {
		return pSystemEntity;
	}
	
	public ParserRule getSystemEntityRule() {
		return getSystemEntityAccess().getRule();
	}

	//Import:
	//	"Import" importedNamespace=FqnWithWildCard;
	public ImportElements getImportAccess() {
		return pImport;
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}

	//FqnWithWildCard:
	//	FQN ".*"?;
	public FqnWithWildCardElements getFqnWithWildCardAccess() {
		return pFqnWithWildCard;
	}
	
	public ParserRule getFqnWithWildCardRule() {
		return getFqnWithWildCardAccess().getRule();
	}

	//Diagram:
	//	imports+=Import* "Diagram" name=ID "{" includes+=Include* "}";
	public DiagramElements getDiagramAccess() {
		return pDiagram;
	}
	
	public ParserRule getDiagramRule() {
		return getDiagramAccess().getRule();
	}

	//Include:
	//	include=("Include" | "Exclude") entity=[Entity|FQN] ("with" "{" fields+=[Property] ("," fields+=[Property])* "}");
	public IncludeElements getIncludeAccess() {
		return pInclude;
	}
	
	public ParserRule getIncludeRule() {
		return getIncludeAccess().getRule();
	}

	//EnumDeclaration:
	//	"Enumeration" name=ID "{" values+=ID ("," ID)* "}";
	public EnumDeclarationElements getEnumDeclarationAccess() {
		return pEnumDeclaration;
	}
	
	public ParserRule getEnumDeclarationRule() {
		return getEnumDeclarationAccess().getRule();
	}

	//FQN:
	//	ID ("." ID)*;
	public FQNElements getFQNAccess() {
		return pFQN;
	}
	
	public ParserRule getFQNRule() {
		return getFQNAccess().getRule();
	}

	//Entity:
	//	"Entity" name=ID "{" properties+=Property* "}";
	public EntityElements getEntityAccess() {
		return pEntity;
	}
	
	public ParserRule getEntityRule() {
		return getEntityAccess().getRule();
	}

	//Domain:
	//	imports+=Import* "Domain" name=ID "Description: " description=STRING "{" entities+=Entity+ "}";
	public DomainElements getDomainAccess() {
		return pDomain;
	}
	
	public ParserRule getDomainRule() {
		return getDomainAccess().getRule();
	}

	//Property:
	//	Field | Association;
	public PropertyElements getPropertyAccess() {
		return pProperty;
	}
	
	public ParserRule getPropertyRule() {
		return getPropertyAccess().getRule();
	}

	//Association:
	//	"Relation" name=ID ":" type=[Entity|FQN] multiplicity=Multiplicty;
	public AssociationElements getAssociationAccess() {
		return pAssociation;
	}
	
	public ParserRule getAssociationRule() {
		return getAssociationAccess().getRule();
	}

	//enum Multiplicty:
	//	OneToMany="1..N" | ZeroToMany="0..N" | OneToOne="1";
	public MultiplictyElements getMultiplictyAccess() {
		return unknownRuleMultiplicty;
	}
	
	public EnumRule getMultiplictyRule() {
		return getMultiplictyAccess().getRule();
	}

	//Field:
	//	"Field" name=ID ":" literal=Literal;
	public FieldElements getFieldAccess() {
		return pField;
	}
	
	public ParserRule getFieldRule() {
		return getFieldAccess().getRule();
	}

	//Literal:
	//	{Literal} name="Decimal" | {Literal} name="Money" | {Literal} name="Text" | {Literal} name="Boolean" | {Literal}
	//	name="Int" | Enum;
	public LiteralElements getLiteralAccess() {
		return pLiteral;
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}

	//Enum:
	//	"Enum" type=[EnumDeclaration];
	public EnumElements getEnumAccess() {
		return pEnum;
	}
	
	public ParserRule getEnumRule() {
		return getEnumAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
